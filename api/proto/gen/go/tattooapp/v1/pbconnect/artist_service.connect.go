// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tattooapp/v1/artist_service.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kbremont/tattoo-app/api/proto/gen/go/tattooapp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtistServiceName is the fully-qualified name of the ArtistService service.
	ArtistServiceName = "tattooapp.v1.ArtistService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtistServiceLinkInstagramAccountProcedure is the fully-qualified name of the ArtistService's
	// LinkInstagramAccount RPC.
	ArtistServiceLinkInstagramAccountProcedure = "/tattooapp.v1.ArtistService/LinkInstagramAccount"
	// ArtistServiceCreateArtistProcedure is the fully-qualified name of the ArtistService's
	// CreateArtist RPC.
	ArtistServiceCreateArtistProcedure = "/tattooapp.v1.ArtistService/CreateArtist"
)

// ArtistServiceClient is a client for the tattooapp.v1.ArtistService service.
type ArtistServiceClient interface {
	LinkInstagramAccount(context.Context, *connect.Request[v1.LinkInstagramAccountRequest]) (*connect.Response[v1.LinkInstagramAccountResponse], error)
	CreateArtist(context.Context, *connect.Request[v1.CreateArtistRequest]) (*connect.Response[v1.CreateArtistResponse], error)
}

// NewArtistServiceClient constructs a client for the tattooapp.v1.ArtistService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtistServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	artistServiceMethods := v1.File_tattooapp_v1_artist_service_proto.Services().ByName("ArtistService").Methods()
	return &artistServiceClient{
		linkInstagramAccount: connect.NewClient[v1.LinkInstagramAccountRequest, v1.LinkInstagramAccountResponse](
			httpClient,
			baseURL+ArtistServiceLinkInstagramAccountProcedure,
			connect.WithSchema(artistServiceMethods.ByName("LinkInstagramAccount")),
			connect.WithClientOptions(opts...),
		),
		createArtist: connect.NewClient[v1.CreateArtistRequest, v1.CreateArtistResponse](
			httpClient,
			baseURL+ArtistServiceCreateArtistProcedure,
			connect.WithSchema(artistServiceMethods.ByName("CreateArtist")),
			connect.WithClientOptions(opts...),
		),
	}
}

// artistServiceClient implements ArtistServiceClient.
type artistServiceClient struct {
	linkInstagramAccount *connect.Client[v1.LinkInstagramAccountRequest, v1.LinkInstagramAccountResponse]
	createArtist         *connect.Client[v1.CreateArtistRequest, v1.CreateArtistResponse]
}

// LinkInstagramAccount calls tattooapp.v1.ArtistService.LinkInstagramAccount.
func (c *artistServiceClient) LinkInstagramAccount(ctx context.Context, req *connect.Request[v1.LinkInstagramAccountRequest]) (*connect.Response[v1.LinkInstagramAccountResponse], error) {
	return c.linkInstagramAccount.CallUnary(ctx, req)
}

// CreateArtist calls tattooapp.v1.ArtistService.CreateArtist.
func (c *artistServiceClient) CreateArtist(ctx context.Context, req *connect.Request[v1.CreateArtistRequest]) (*connect.Response[v1.CreateArtistResponse], error) {
	return c.createArtist.CallUnary(ctx, req)
}

// ArtistServiceHandler is an implementation of the tattooapp.v1.ArtistService service.
type ArtistServiceHandler interface {
	LinkInstagramAccount(context.Context, *connect.Request[v1.LinkInstagramAccountRequest]) (*connect.Response[v1.LinkInstagramAccountResponse], error)
	CreateArtist(context.Context, *connect.Request[v1.CreateArtistRequest]) (*connect.Response[v1.CreateArtistResponse], error)
}

// NewArtistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtistServiceHandler(svc ArtistServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artistServiceMethods := v1.File_tattooapp_v1_artist_service_proto.Services().ByName("ArtistService").Methods()
	artistServiceLinkInstagramAccountHandler := connect.NewUnaryHandler(
		ArtistServiceLinkInstagramAccountProcedure,
		svc.LinkInstagramAccount,
		connect.WithSchema(artistServiceMethods.ByName("LinkInstagramAccount")),
		connect.WithHandlerOptions(opts...),
	)
	artistServiceCreateArtistHandler := connect.NewUnaryHandler(
		ArtistServiceCreateArtistProcedure,
		svc.CreateArtist,
		connect.WithSchema(artistServiceMethods.ByName("CreateArtist")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tattooapp.v1.ArtistService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtistServiceLinkInstagramAccountProcedure:
			artistServiceLinkInstagramAccountHandler.ServeHTTP(w, r)
		case ArtistServiceCreateArtistProcedure:
			artistServiceCreateArtistHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtistServiceHandler struct{}

func (UnimplementedArtistServiceHandler) LinkInstagramAccount(context.Context, *connect.Request[v1.LinkInstagramAccountRequest]) (*connect.Response[v1.LinkInstagramAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tattooapp.v1.ArtistService.LinkInstagramAccount is not implemented"))
}

func (UnimplementedArtistServiceHandler) CreateArtist(context.Context, *connect.Request[v1.CreateArtistRequest]) (*connect.Response[v1.CreateArtistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tattooapp.v1.ArtistService.CreateArtist is not implemented"))
}
