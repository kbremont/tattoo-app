// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tattooapp/artist/v1/artist_service.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kbremont/tattoo-app/backend/api/proto/gen/go/tattooapp/artist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtistServiceName is the fully-qualified name of the ArtistService service.
	ArtistServiceName = "tattooapp.artist.v1.ArtistService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtistServiceCreateArtistProfileProcedure is the fully-qualified name of the ArtistService's
	// CreateArtistProfile RPC.
	ArtistServiceCreateArtistProfileProcedure = "/tattooapp.artist.v1.ArtistService/CreateArtistProfile"
	// ArtistServiceGetArtistProfileProcedure is the fully-qualified name of the ArtistService's
	// GetArtistProfile RPC.
	ArtistServiceGetArtistProfileProcedure = "/tattooapp.artist.v1.ArtistService/GetArtistProfile"
	// ArtistServiceDeleteArtistProfileProcedure is the fully-qualified name of the ArtistService's
	// DeleteArtistProfile RPC.
	ArtistServiceDeleteArtistProfileProcedure = "/tattooapp.artist.v1.ArtistService/DeleteArtistProfile"
)

// ArtistServiceClient is a client for the tattooapp.artist.v1.ArtistService service.
type ArtistServiceClient interface {
	CreateArtistProfile(context.Context, *connect.Request[v1.CreateArtistProfileRequest]) (*connect.Response[v1.CreateArtistProfileResponse], error)
	GetArtistProfile(context.Context, *connect.Request[v1.GetArtistProfileRequest]) (*connect.Response[v1.GetArtistProfileResponse], error)
	DeleteArtistProfile(context.Context, *connect.Request[v1.DeleteArtistProfileRequest]) (*connect.Response[v1.DeleteArtistProfileResponse], error)
}

// NewArtistServiceClient constructs a client for the tattooapp.artist.v1.ArtistService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtistServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	artistServiceMethods := v1.File_tattooapp_artist_v1_artist_service_proto.Services().ByName("ArtistService").Methods()
	return &artistServiceClient{
		createArtistProfile: connect.NewClient[v1.CreateArtistProfileRequest, v1.CreateArtistProfileResponse](
			httpClient,
			baseURL+ArtistServiceCreateArtistProfileProcedure,
			connect.WithSchema(artistServiceMethods.ByName("CreateArtistProfile")),
			connect.WithClientOptions(opts...),
		),
		getArtistProfile: connect.NewClient[v1.GetArtistProfileRequest, v1.GetArtistProfileResponse](
			httpClient,
			baseURL+ArtistServiceGetArtistProfileProcedure,
			connect.WithSchema(artistServiceMethods.ByName("GetArtistProfile")),
			connect.WithClientOptions(opts...),
		),
		deleteArtistProfile: connect.NewClient[v1.DeleteArtistProfileRequest, v1.DeleteArtistProfileResponse](
			httpClient,
			baseURL+ArtistServiceDeleteArtistProfileProcedure,
			connect.WithSchema(artistServiceMethods.ByName("DeleteArtistProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// artistServiceClient implements ArtistServiceClient.
type artistServiceClient struct {
	createArtistProfile *connect.Client[v1.CreateArtistProfileRequest, v1.CreateArtistProfileResponse]
	getArtistProfile    *connect.Client[v1.GetArtistProfileRequest, v1.GetArtistProfileResponse]
	deleteArtistProfile *connect.Client[v1.DeleteArtistProfileRequest, v1.DeleteArtistProfileResponse]
}

// CreateArtistProfile calls tattooapp.artist.v1.ArtistService.CreateArtistProfile.
func (c *artistServiceClient) CreateArtistProfile(ctx context.Context, req *connect.Request[v1.CreateArtistProfileRequest]) (*connect.Response[v1.CreateArtistProfileResponse], error) {
	return c.createArtistProfile.CallUnary(ctx, req)
}

// GetArtistProfile calls tattooapp.artist.v1.ArtistService.GetArtistProfile.
func (c *artistServiceClient) GetArtistProfile(ctx context.Context, req *connect.Request[v1.GetArtistProfileRequest]) (*connect.Response[v1.GetArtistProfileResponse], error) {
	return c.getArtistProfile.CallUnary(ctx, req)
}

// DeleteArtistProfile calls tattooapp.artist.v1.ArtistService.DeleteArtistProfile.
func (c *artistServiceClient) DeleteArtistProfile(ctx context.Context, req *connect.Request[v1.DeleteArtistProfileRequest]) (*connect.Response[v1.DeleteArtistProfileResponse], error) {
	return c.deleteArtistProfile.CallUnary(ctx, req)
}

// ArtistServiceHandler is an implementation of the tattooapp.artist.v1.ArtistService service.
type ArtistServiceHandler interface {
	CreateArtistProfile(context.Context, *connect.Request[v1.CreateArtistProfileRequest]) (*connect.Response[v1.CreateArtistProfileResponse], error)
	GetArtistProfile(context.Context, *connect.Request[v1.GetArtistProfileRequest]) (*connect.Response[v1.GetArtistProfileResponse], error)
	DeleteArtistProfile(context.Context, *connect.Request[v1.DeleteArtistProfileRequest]) (*connect.Response[v1.DeleteArtistProfileResponse], error)
}

// NewArtistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtistServiceHandler(svc ArtistServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artistServiceMethods := v1.File_tattooapp_artist_v1_artist_service_proto.Services().ByName("ArtistService").Methods()
	artistServiceCreateArtistProfileHandler := connect.NewUnaryHandler(
		ArtistServiceCreateArtistProfileProcedure,
		svc.CreateArtistProfile,
		connect.WithSchema(artistServiceMethods.ByName("CreateArtistProfile")),
		connect.WithHandlerOptions(opts...),
	)
	artistServiceGetArtistProfileHandler := connect.NewUnaryHandler(
		ArtistServiceGetArtistProfileProcedure,
		svc.GetArtistProfile,
		connect.WithSchema(artistServiceMethods.ByName("GetArtistProfile")),
		connect.WithHandlerOptions(opts...),
	)
	artistServiceDeleteArtistProfileHandler := connect.NewUnaryHandler(
		ArtistServiceDeleteArtistProfileProcedure,
		svc.DeleteArtistProfile,
		connect.WithSchema(artistServiceMethods.ByName("DeleteArtistProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tattooapp.artist.v1.ArtistService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtistServiceCreateArtistProfileProcedure:
			artistServiceCreateArtistProfileHandler.ServeHTTP(w, r)
		case ArtistServiceGetArtistProfileProcedure:
			artistServiceGetArtistProfileHandler.ServeHTTP(w, r)
		case ArtistServiceDeleteArtistProfileProcedure:
			artistServiceDeleteArtistProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtistServiceHandler struct{}

func (UnimplementedArtistServiceHandler) CreateArtistProfile(context.Context, *connect.Request[v1.CreateArtistProfileRequest]) (*connect.Response[v1.CreateArtistProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tattooapp.artist.v1.ArtistService.CreateArtistProfile is not implemented"))
}

func (UnimplementedArtistServiceHandler) GetArtistProfile(context.Context, *connect.Request[v1.GetArtistProfileRequest]) (*connect.Response[v1.GetArtistProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tattooapp.artist.v1.ArtistService.GetArtistProfile is not implemented"))
}

func (UnimplementedArtistServiceHandler) DeleteArtistProfile(context.Context, *connect.Request[v1.DeleteArtistProfileRequest]) (*connect.Response[v1.DeleteArtistProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tattooapp.artist.v1.ArtistService.DeleteArtistProfile is not implemented"))
}
